using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;
namespace Words
{
    public class classRTF
    {

		public enum enuRTF_Tags  // tags missing : do, operator, ls, s
		{
			ab,
			absh,
			abslock,
			absw,
			acaps,
			acf,
			additive,
			adjustValue,
			adjust10Value,
			adjust2Value,
			adjust3Value,
			adjust4Value,
			adjust5Value,
			adjust6Value,
			adjust7Value,
			adjust8Value,
			adjust9Value,
			adn,
			aenddoc,
			aendnotes,
			aexpnd,
			af,
			afs,
			aftnbj,
			aftncn,
			aftnnalc,
			aftnnar,
			aftnnauc,
			aftnnchi,
			aftnnrlc,
			aftnnruc,
			aftnrestart,
			aftnrstcont,
			aftnsep,
			aftnsepc,
			aftnstart,
			aftntj,
			ai,
			alang,
			allprot,
			alt,
			anchorText,
			animtext,
			ansicpg,
			aoutl,
			ascaps,
			ashad,
			astrike,
			aul,
			auld,
			auldb,
			aulw,
			aup,
			author,
			b,
			bdbfhdr,
			bgbdiag,
			bgcross,
			bgdcross,
			bgdkbdiag,
			bgdkcross,
			bgdkdcross,
			bgdkfdiag,
			bgdkhoriz,
			bgdkvert,
			bgfdiag,
			bghoriz,
			bgvert,
			bin,
			binfsxn,
			binsxn,
			bkmkpub,
			bliptag,
			blipuid,
			blipupi,
			blue,
			box,
			brdrart,
			brdrb,
			brdrbar,
			brdrbtw,
			brdrcf,
			brdrdash,
			brdrdashd,
			brdrdashdd,
			brdrdashdotstr,
			brdrdashsm,
			brdrdb,
			brdrdot,
			brdremboss,
			brdrengrave,
			brdrhair,
			brdrl,
			brdrr,
			brdrs,
			brdrsh,
			brdrt,
			brdrth,
			brdrthtnlg,
			brdrthtnmg,
			brdrthtnsg,
			brdrtnthlg,
			brdrtnthmg,
			brdrtnthsg,
			brdrtnthtnlg,
			brdrtnthtnmg,
			brdrtnthtnsg,
			brdrtriple,
			brdrw,
			brdrwavy,
			brdrwavydb,
			brkfrm,
			brsp,
			bullet,
			buptim,
			bxe,
			caps,
			category,
			cb,
			cbpat,
			cchs,
			cell,
			cellx,
			cf,
			cfpat,
			charscalex,
			chatn,
			chbgbdiag,
			chbgcross,
			chbgdcross,
			chbgdkbdiag,
			chbgdkcross,
			chbgdkdcross,
			chbgdkfdiag,
			chbgdkhoriz,
			chbgdkvert,
			chbgfdiag,
			chbghoriz,
			chbgvert,
			chbrdr,
			chcbpat,
			chcfpat,
			chdate,
			chdpa,
			chdpl,
			chftn,
			chftnsep,
			chftnsepc,
			chpgn,
			chshdng,
			chtime,
			clbgbdiag,
			clbgcross,
			clbgdcross,
			clbgdkbdiag,
			clbgdkcross,
			clbgdkdcross,
			clbgdkfdiag,
			clbgdkhor,
			clbgdkvert,
			clbgfdiag,
			clbghoriz,
			clbgvert,
			clbrdrb,
			clbrdrl,
			clbrdrr,
			clbrdrt,
			clcbpat,
			clcfpat,
			clmgf,
			clmrg,
			clshdng,
			cltxlrtb,
			cltxtbrl,
			clvertalb,
			clvertalc,
			clvertalt,
			colno,
			cols,
			colsr,
			colsx,
			column,
			colw,
			comment,
			company,
			crauth,
			crdate,
			creatim,
			cropFromBottom,
			cropFromLeft,
			cropFromRight,
			cropFromTop,
			cs,
			ctrl,
			cvmme,
			c3DAmbientIntensity,
			c3DDiffuseAmt,
			c3DEdgeThickness,
			c3DExtrudeBackward,
			c3DExtrudeForward,
			c3DExtrusionColor,
			c3DFillIntensity,
			c3DFillX,
			c3DFillY,
			c3DFillZ,
			c3DKeyIntensity,
			c3DKeyX,
			c3DKeyY,
			c3DKeyZ,
			c3DOriginX,
			c3DOriginY,
			c3DRenderMode,
			c3DRotationAngle,
			c3DRotationAxisX,
			c3DRotationAxisY,
			c3DRotationAxisZ,
			c3DRotationCenterX,
			c3DRotationCenterY,
			c3DRotationCenterZ,
			c3DShininess,
			c3DSkewAmount,
			c3DSkewAngle,
			c3DSpecularAmt,
			c3DXRotationAngle,
			c3DXViewpoint,
			c3DYRotationAngle,
			c3DYViewpoint,
			c3DZViewpoint,
			defformat,
			deflang,
			deflangfe,
			deftab,
			deleted,
			dfrauth,
			dfrdate,
			dfrmtxtx,
			dfrmtxty,
			dfrstart,
			dfrstop,
			dfrxst,
			dibitmap,
			dn,
			dntblnsbdb,
			dobxcolumn,
			dobxmargin,
			dobxpage,
			dobymargin,
			dobypage,
			dobypara,
			doccomm,
			doctemp,
			doctype,
			docvar,
			dodhgt,
			dolock,
			dpaendhol,
			dpaendl,
			dpaendsol,
			dpaendw,
			dparc,
			dparcflipx,
			dparcflipy,
			dpastarthol,
			dpastartl,
			dpastartsol,
			dpastartw,
			dpcallout,
			dpcoa,
			dpcoaccent,
			dpcobestfit,
			dpcoborder,
			dpcodabs,
			dpcodbottom,
			dpcodcenter,
			dpcodescent,
			dpcodtop,
			dpcolength,
			dpcominusx,
			dpcominusy,
			dpcooffset,
			dpcosmarta,
			dpcotdouble,
			dpcotright,
			dpcotsingle,
			dpcottriple,
			dpcount,
			dpellipse,
			dpendgroup,
			dpfillbgcb,
			dpfillbgcg,
			dpfillbgcr,
			dpfillbggray,
			dpfillbgpal,
			dpfillfgcb,
			dpfillfgcg,
			dpfillfgcr,
			dpfillfggray,
			dpfillfgpal,
			dpfillpat,
			dpgroup,
			dpline,
			dplinecob,
			dplinecog,
			dplinecor,
			dplinedado,
			dplinedadodo,
			dplinedash,
			dplinedot,
			dplinegray,
			dplinehollow,
			dplinepal,
			dplinesolid,
			dplinew,
			dppolycount,
			dppolygon,
			dppolyline,
			dpptx,
			dppty,
			dprect,
			dproundr,
			dpshadow,
			dpshadx,
			dpshady,
			dptxbx,
			dptxbxmar,
			dptxbxtext,
			dpx,
			dpxsize,
			dpy,
			dpysize,
			dropcapli,
			dropcapt,
			ds,
			dxfrtext,
			dxTextLeft,
			dxTextRight,
			dxWrapDistLeft,
			dxWrapDistRight,
			dxyCalloutDropSpecified,
			dxyCalloutGap,
			dxyCalloutLengthSpecified,
			dy,
			dyTextBottom,
			dyTextTop,
			dyWrapDistBottom,
			dyWrapDistTop,
			edmins,
			embo,
			emdash,
			emfblip,
			emspace,
			endash,
			enddoc,
			endnhere,
			endnotes,
			enspace,
			expnd,
			expndtw,
			expshrtn,
			f,
			facingp,
			falt,
			fBehindDocument,
			fbias,
			fbidi,
			fCallout,
			fCalloutAccentBar,
			fCalloutDropAuto,
			fCalloutLengthSpecified,
			fCalloutTextBorder,
			fcharset,
			fc3DFillHarsh,
			fc3DKeyHarsh,
			fc3DLightFace,
			fc3DMetallic,
			fc3DParallel,
			fC3DRotationCenterAut,
			fc3DUseExtrusionColor,
			fdecor,
			fet,
			ffdefres,
			ffdeftext,
			ffentrymcr,
			ffexitmcr,
			ffformat,
			ffhaslistbox,
			ffhelptext,
			ffhps,
			fFilled,
			ffl,
			FFlipH,
			FFlipV,
			ffmaxlen,
			ffname,
			ffownhelp,
			ffownstat,
			ffprot,
			ffrecalc,
			ffres,
			ffsize,
			ffstattext,
			fftype,
			fftypetxt,
			fGtext,
			fHidden,
			fi,
			fid,
			file,
			filetbl,
			fillAngle,
			fillBackColor,
			fillBackOpacity,
			fillBlip,
			fillblipflags,
			fillBlipName,
			fillColor,
			fillFocus,
			fillHeight,
			fillOpacity,
			fillOriginX,
			fillOriginY,
			fillShadeColors,
			fillShapeOriginX,
			fillShapeOriginY,
			fillToBottom,
			fillToLeft,
			fillToRight,
			fillToTop,
			fillType,
			fillWidth,
			fIsButton,
			flddirty,
			fldedit,
			fldinst,
			fldlock,
			fldpriv,
			fldrslt,
			fLine,
			fLockAdjustHandles,
			fLockAgainstGrouping,
			fLockAgainstSelect,
			fLockAspectRatio,
			fLockCropping,
			fLockRotation,
			fLockText,
			fLockVerticies,
			fmodern,
			fn,
			fname,
			fnetwork,
			fnil,
			footer,
			footerf,
			footerl,
			footerr,
			footery,
			formdisp,
			formfield,
			formprot,
			formshade,
			fosnum,
			fprq,
			fracwidth,
			frelative,
			froman,
			fs,
			fscript,
			fShadow,
			fswiss,
			ftech,
			ftnbj,
			ftncn,
			ftnil,
			ftnnalc,
			ftnnar,
			ftnnauc,
			ftnnchi,
			ftnnrlc,
			ftnnruc,
			ftnrestart,
			ftnrstcont,
			ftnrstpg,
			ftnsep,
			ftnsepc,
			ftnstart,
			ftntj,
			fttruetype,
			fvaliddos,
			fvalidhpfs,
			fvalidmac,
			fvalidntfs,
			f3D,
			geoBottom,
			geoLeft,
			geoRight,
			geoTop,
			green,
			gtextAlign,
			gtextFBestFit,
			gtextFBold,
			gtextFDxMeasure,
			gtextFItalic,
			gtextFKern,
			gtextFNormalize,
			gtextFont,
			gtextFShadow,
			gtextFShrinkFit,
			gtextFSmallcaps,
			gtextFStretch,
			gtextFStrikethrough,
			gtextFTight,
			gtextFUnderline,
			gtextFVertical,
			gtextSize,
			gtextSpacing,
			gtextUNICODE,
			gutter,
			guttersxn,
			header,
			headerf,
			headerl,
			headerr,
			headery,
			highlight,
			hlfr,
			hlinkbase,
			hlloc,
			hlsrc,
			hpfblwtxt,
			hr,
			hyphauto,
			hyphcaps,
			hyphconsec,
			hyphhotz,
			hyphpar,
			i,
			id,
			ilvl,
			impr,
			intbl,
			ixe,
			jpegblip,
			keep,
			keepn,
			kerning,
			keycode,
			keywords,
			landscape,
			lang,
			ldblquote,
			level,
			levelfollow,
			levelindent,
			leveljc,
			levellegal,
			levelnfc,
			levelnorestart,
			levelnumbers,
			levelold,
			levelprev,
			levelprevspace,
			levelspace,
			levelstartat,
			leveltext,
			li,
			line,
			lineBackColor,
			linebetcol,
			lineblipflags,
			lineColor,
			linecont,
			lineDashing,
			lineEndArrowhead,
			lineEndArrowLength,
			lineEndArrowWidth,
			lineFillBlip,
			lineFillHeight,
			lineFillWidth,
			linemod,
			lineppage,
			linerestart,
			linestart,
			lineStartArrowhead,
			lineStartArrowLength,
			lineStartArrowWidth,
			linestarts,
			lineStyle,
			lineType,
			lineWidth,
			linex,
			linkself,
			linkstyles,
			linkval,
			listid,
			listname,
			listoverridecount,
			listoverrideformat,
			listoverridestart,
			listrestarthdn,
			listsimple,
			listtemplateid,
			listtext,
			lndscpsxn,
			lquote,
			ls,
			ltrch,
			ltrdoc,
			ltrmark,
			ltrpar,
			ltrrow,
			ltrsect,
			lytexcttp,
			lytprtmet,
			macpict,
			makebackup,
			manager,
			margb,
			margbsxn,
			margl,
			marglsxn,
			margmirror,
			margmirsxn,
			margr,
			margrsxn,
			margt,
			margtsxn,
			min,
			mo,
			msmcap,
			nextfile,
			nocolbal,
			noextrasprl,
			nofchars,
			nofcharsws,
			nofpages,
			nofwords,
			nolead,
			noline,
			nonshppict,
			nospaceforul,
			nosupersub,
			notabind,
			noultrlspc,
			nowidctlpar,
			nowrap,
			noxlattoyen,
			objalias,
			objalign,
			objattph,
			objautlink,
			objclass,
			objcropb,
			objcropl,
			objcropr,
			objcropt,
			objdata,
			objemb,
			objh,
			objhtml,
			objicemb,
			objlink,
			objlock,
			objname,
			objocx,
			objpub,
			objscalex,
			objscaley,
			objsect,
			objsetsize,
			objsub,
			objtime,
			objtransy,
			objupdate,
			objw,
			oldlinewrap,
			otblrul,
			outl,
			outlinelevel,
			overlay,
			page,
			pagebb,
			panose,
			paperh,
			paperw,
			par,
			pard,
			pgbrdrb,
			pgbrdrfoot,
			pgbrdrhead,
			pgbrdrl,
			pgbrdropt,
			pgbrdrr,
			pgbrdrsnap,
			pgbrdrt,
			pghsxn,
			pgncont,
			pgndec,
			pgnhn,
			pgnhnsc,
			pgnhnsh,
			pgnhnsm,
			pgnhnsn,
			pgnhnsp,
			pgnlcltr,
			pgnlcrm,
			pgnrestart,
			pgnstart,
			pgnstarts,
			pgnucltr,
			pgnucrm,
			pgnx,
			pgny,
			pgwsxn,
			phcol,
			phmrg,
			phpg,
			pib,
			pibFlags,
			pibName,
			picbmp,
			picbpp,
			piccropb,
			piccropl,
			piccropr,
			piccropt,
			pich,
			pichgoal,
			picprop,
			picscaled,
			picscalex,
			picscaley,
			pictureBiLevel,
			PictureBrightness,
			pictureContrast,
			pictureGamma,
			pictureGray,
			pictureTransparent,
			picw,
			picwgoal,
			plain,
			pmmetafile,
			pn,
			pnacross,
			pnb,
			pncaps,
			pncard,
			pncf,
			pndec,
			pnf,
			pnfs,
			pngblip,
			pnhang,
			pni,
			pnindent,
			pnlcltr,
			pnlcrm,
			pnlvl,
			pnlvlblt,
			pnlvlbody,
			pnlvlcont,
			pnnumonce,
			pnord,
			pnordt,
			pnprev,
			pnqc,
			pnql,
			pnqr,
			pnrauth,
			pnrdate,
			pnrestart,
			pnrnfc,
			pnrnot,
			pnrpnbr,
			pnrrgb,
			pnrstart,
			pnrstop,
			pnrxst,
			pnscaps,
			pnseclvl,
			pnsp,
			pnstart,
			pnstrike,
			pntext,
			pntxta,
			pntxtb,
			pnucltr,
			pnucrm,
			pnul,
			pnuld,
			pnuldb,
			pnulnone,
			pnulw,
			posnegx,
			posnegy,
			posx,
			posxc,
			posxi,
			posxl,
			posxo,
			posxr,
			posy,
			posyb,
			posyc,
			posyil,
			posyin,
			posyout,
			posyt,
			prcolbl,
			printdata,
			printim,
			propname,
			proptype,
			pSegmentInfo,
			psover,
			psz,
			pubauto,
			pVerticies,
			pvmrg,
			pvpara,
			pvpg,
			pWrapPolygonVertices,
			qc,
			qj,
			ql,
			qr,
			rdblquote,
			red,
			result,
			revauth,
			revauthdel,
			revbar,
			revdttm,
			revdttmdel,
			revised,
			revisions,
			revprop,
			revprot,
			revtbl,
			revtim,
			ri,
			Rotation,
			row,
			rquote,
			rsltbmp,
			rsltmerge,
			rsltpict,
			rsltrtf,
			rslttxt,
			rtlch,
			rtldoc,
			rtlmark,
			rtlpar,
			rtlrow,
			rtlsect,
			rxe,
			s,
			sa,
			sautoupd,
			sb,
			sbasedon,
			sbkcol,
			sbkeven,
			sbknone,
			sbkodd,
			sbkpage,
			sbys,
			scaps,
			sec,
			sect,
			sectd,
			sectnum,
			sectunlocked,
			shad,
			shading,
			shadowColor,
			shadowHighlight,
			shadowOffsetX,
			shadowOffsetY,
			shadowOpacity,
			shadowOriginX,
			ShadowOriginY,
			shadowPerspectiveX,
			shadowPerspectiveY,
			shadowScaleXToX,
			shadowScaleXToY,
			shadowScaleYToX,
			shadowScaleYToY,
			shadowSecondOffsetX,
			shadowSecondOffsetY,
			shadowType,
			shadowWeight,
			ShapeType,
			shidden,
			shift,
			shpbottom,
			shpbxcolumn,
			shpbxmargin,
			shpbxpage,
			shpbymargin,
			shpbypage,
			shpbypara,
			shpfhdr,
			shpgrp,
			shpleft,
			shplid,
			shplockanchor,
			shppict,
			shpright,
			shprslt,
			shptop,
			shptxt,
			shpwr,
			shpwrk,
			shpz,
			sl,
			slmult,
			snext,
			softcol,
			softlheight,
			softline,
			softpage,
			spcoa,
			spcod,
			spcot,
			sprsbsp,
			sprslnsp,
			sprsspbf,
			sprstsm,
			sprstsp,
			staticval,
			stextflow,
			strike,
			strikedl,
			sub,
			subdocument,
			subfontby,
			subject,
			super,
			swpbdr,
			tab,
			tb,
			tcelld,
			tcf,
			tcl,
			template,
			Text,
			title,
			titlepg,
			tldot,
			tleq,
			tlhyph,
			tlth,
			tlul,
			tqc,
			tqdec,
			tqr,
			transmf,
			trbrdrb,
			trbrdrh,
			trbrdrl,
			trbrdrr,
			trbrdrt,
			trbrdrv,
			trgaph,
			trhdr,
			trkeep,
			trleft,
			trowd,
			trqc,
			trql,
			trqr,
			trrh,
			truncatefont,
			truncex,
			tx,
			txe,
			txflTextFlow,
			u,
			uc,
			ud,
			ul,
			uld,
			uldash,
			uldashd,
			uldashdd,
			uldb,
			ulnone,
			ulth,
			ulw,
			ulwave,
			up,
			upr,
			userprops,
			v,
			vern,
			version,
			vertalb,
			vertalc,
			vertalj,
			vertalt,
			viewkind,
			viewscale,
			viewzk,
			wbitmap,
			wbmbitspixel,
			wbmplanes,
			wbmwidthbytes,
			widctlpar,
			widowctrl,
			windowcaption,
			wmetafile,
			wpjst,
			wpsp,
			wptab,
			WrapText,
			wraptrsp,
			WzName,
			xef,
			yr,
			zwj,
			zwnj
		};


		static Color _ColorTable_Parse_PeelColor(string strColorList)
        {
            try
            {
                int intRed = Tag_GetNext(strColorList, enuRTF_Tags.red);
                int intGreen = Tag_GetNext(strColorList, enuRTF_Tags.green);
                int intBlue = Tag_GetNext(strColorList, enuRTF_Tags.blue);

                return Color.FromArgb(intRed, intGreen, intBlue);
            }
            catch (Exception)
            {
            }
            return Color.Blue;
        }

        public static List<Color> ColorTable_Parse(string strRTF)
        {
            List<Color> lstRetVal = new List<Color>();
            lstRetVal.Add(Color.Black);
            string strTag_ColorTable_Start = "{\\colortbl";
            int intColorTable_Start = strRTF.IndexOf(strTag_ColorTable_Start);
            string strColorTable = Block_GetNext(strRTF, intColorTable_Start);

            char[] chrSplit = { ';' };

            string[] strColors = strColorTable.Split(chrSplit, StringSplitOptions.RemoveEmptyEntries);

            for (int intColorCounter = 1; intColorCounter < strColors.Length; intColorCounter++)
                lstRetVal.Add(_ColorTable_Parse_PeelColor(strColors[intColorCounter]));

            return lstRetVal;
        }

        
        public static int Tag_GetNext(string strRTF, enuRTF_Tags eRTFTag) { return Tag_GetNext(strRTF, eRTFTag, 0); }

        public static int Tag_GetNext(string strRTF, enuRTF_Tags eRTFTag, int intStart)
        {
            string strTag ="\\" + eRTFTag.ToString();
            int intHighlight_Start = strRTF.IndexOf(strTag, intStart);
			
            while (intHighlight_Start >= 0)
            {
				int intTestCharIndex = intHighlight_Start + strTag.Length;
				char chrTest = strRTF.Length > intTestCharIndex
											 ? strRTF[intTestCharIndex]
											 : ' ';

				if (char.IsLetter(chrTest))
				{
					intHighlight_Start = strRTF.IndexOf(strTag, intHighlight_Start +1);
				}
				else
				{
					string strTag_Isolated = strRTF.Substring(intHighlight_Start);
					if (strTag_Isolated.Length > 0)
					{
						int intTag_Isolated_end = strTag_Isolated.IndexOf("\\", 1);
						if (intTag_Isolated_end < 0)
							intTag_Isolated_end = strTag_Isolated.Length;
						string strTag_Isolated_Num = strTag_Isolated.Substring(strTag.Length, intTag_Isolated_end - strTag.Length);
						try
						{
							return Convert.ToInt32(strTag_Isolated_Num);

						}
						catch (Exception)
						{
						}
					}
				}
            }
            return -1;
        }

        public static string Block_GetNext(string strRTF) { return Block_GetNext(strRTF, 0); }
        public static string Block_GetNext(string strRTF, int intStart)
        {
            if (intStart < 0) return "";

            string str_Start = "{";
            string str_End = "}";

            int intNum_Open = 0;
            int intCut_Start = strRTF.IndexOf(str_Start, intStart, StringComparison.Ordinal), intCut_Close = 0;
            if (intCut_Start > 0)
                strRTF = strRTF.Substring(intCut_Start);
            else if (intCut_Start < 0)
                return "";

            // strRTF starts with a div
            intNum_Open++;
            int intIndex = 0;
            do
            {
                intCut_Start = strRTF.IndexOf(str_Start, intIndex + 1, StringComparison.Ordinal);
                intCut_Close = strRTF.IndexOf(str_End, intIndex + 1, StringComparison.Ordinal);
                if (intCut_Start >= 0 && intCut_Close >= 0)
                {
                    if (intCut_Start < intCut_Close)
                    {
                        intNum_Open++;
                        intIndex = intCut_Start;
                    }
                    else
                    {
                        intNum_Open--;
                        intIndex = intCut_Close;
                    }
                }
                else if (intCut_Close >= 0)
                {
                    intNum_Open--;
                    intIndex = intCut_Close;

                }
                else
                    intNum_Open = -1;
            } while (intNum_Open > 0);

            return strRTF.Substring(0, intCut_Close + str_End.Length);
        }

        string Indent(string strRTF, string strTab_Base)
        {
            while (strRTF.Contains("\r "))
                strRTF.Replace("\r ", "\r");

            strRTF = strRTF.Replace("\n", "")
                             .Replace("\r", "")
                             .Replace("\t", "")
                             .Trim();
            string strRetVal = "";
            string strFront = "";
            string strTab = "";
            while (strRTF.Length > 0)
            {
                strFront = "";
                enuHTMLCleaner_PeelReturnType eHtmlPeelType = HtmlCleaner_PeelFront(strRTF, ref strFront);
                if (eHtmlPeelType == enuHTMLCleaner_PeelReturnType.TagOpen)
                    strTab += strTab_Base;

                strRetVal += ("\r\n" + strTab + strFront.Trim());

                strRTF = strRTF.Substring(strFront.Length).Trim();

                if (eHtmlPeelType == enuHTMLCleaner_PeelReturnType.TagClose)
                    if (strTab.Length > strTab_Base.Length)
                        strTab = strTab.Substring(strTab_Base.Length);
            }
            return strRetVal;
        }

        enum enuHTMLCleaner_PeelReturnType { TagOpen, TagClose, Text, _numHTMLCleaner_PeelReturnType };
        enuHTMLCleaner_PeelReturnType HtmlCleaner_PeelFront(string strRTF, ref string strFront)
        {
            if (strRTF.Length == 0) return enuHTMLCleaner_PeelReturnType.Text;
            int intTagOpen = strRTF.IndexOf('{');
            int intTagClose = strRTF.IndexOf('}');

            if (intTagOpen == 0)
            {
                if (intTagClose > intTagOpen)
                    strFront = strRTF.Substring(0, intTagClose + 1);
                return (strRTF.Length > 1 && strRTF[1] == '/')
                                                         ? enuHTMLCleaner_PeelReturnType.TagClose
                                                         : enuHTMLCleaner_PeelReturnType.TagOpen;
            }
            else
            {
                if (intTagOpen > 0)
                    strFront = strRTF.Substring(0, intTagOpen);
                else
                    strFront = strRTF;
                return enuHTMLCleaner_PeelReturnType.Text;
            }
        }

    }
}
